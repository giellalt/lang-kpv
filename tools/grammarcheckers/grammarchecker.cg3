# -*- cg-pre-pipe: "hfst-tokenise -g ../../tools/tokenisers/tokeniser-gramcheck-gt-desc.pmhfst" -*-
# Divvun & Giellatekno - open source grammars for Sámi and other languages
# Copyright © 2000-2017 UiT The arctic University of Norway
# http://giellatekno.uit.no & http://divvun.no
#
# This program is free software; you can redistribute and/or modify
# this file under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version. The GNU General Public License
# is found at http://www.gnu.org/licenses/gpl.html. It is
# also available in the file $GTHOME/LICENSE.txt.
#
# Other licensing options are available upon request, please contact
# giellatekno@hum.uit.no or divvun@hum.uit.no

# ==================================================================== #
#!!       K O M I   G R A M M A R   C H E C K E R
# ==================================================================== #
# ====================================================================

#  Sámi language technology 2000-2017, UiT The arctic University of Norway #

# ---------------------- #
#   Development setup:   #
# ---------------------- #
#
# cd $GTHOME/langs/kpv
# ./autogen.sh
# ./configure --enable-apertium --with-hfst --enable-syntax --enable-grammarchecker --enable-tokenisers --enable-alignment --enable-reversed-intersect
# make
# cd tools/grammarcheckers
# make dev
#
# ---------------------- #
#   Then edit/test as:   #
# ---------------------- #
#
# emacs grammarchecker.cg3  # and C-c C-i / C-c C-c if you have cg-mode installed
# echo "Sun ij puátá." | sh modes/kpvgram.mode  # from the terminal
#
# ---------------------- #
#   Other debug-pipes:   #
# ---------------------- #
#
# ls modes/
#
# ---------------------- #


# The pipeline (but use modes, above)
# echo "Hei." | hfst-tokenise -g ../tokenisers/tokeniser-gramcheck-gt-desc.pmhfst | vislcg3 -g disambiguator.cg3 -t | vislcg3 -g grammarchecker.cg3 -t  



      # =========================================== #
      #      Short table of contents                #
      # =========================================== #

      # Delimiters
      # Tags and sets
      # Grammar checking rules

# =============== #
#!! # DELIMITERS
# =============== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>" sent ;

# ================== #
#!! # TAGS AND SETS
# ================== #


SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

#!! ### Beginning and end of sentence	
LIST BOS = (>>>) (<s>);  #!! BOS
LIST EOS = (<<<) (</s>); #!! EOS

#!! ### Miscellanous

LIST CmpTest = CmpTest ; #!! CmpTest
LIST Err = Err ;  #!! Err

#!! ### Parts of speech tags
LIST N = N ; #!! N
LIST V = V ; #!! V
LIST A = A ; #!! A
LIST Adv = Adv ; #!! Adv
LIST CC = CC ; #!! CC
LIST CS = CS ; #!! CS
LIST Interj = Interj interj ij; #!! Inter
LIST Pron = Pron ; #!! Pron
LIST Num = Num ; #!! Num
LIST Pcle = Pcle ; #!! Pcle
LIST Clt = Clt ; #!! Clt
LIST Po = Po ; #!! Po
LIST Dem = Dem ; #!! Dem
LIST Qnt = Qnt ; #!! Qnt
LIST Prop = Prop ; #!! Prop
LIST WORD = N V A Adv CC CS Interj Pron Num Pcle Clt Po ;

#!! ### Derivation tags
LIST Ex/A = Ex/A ; #!! Ex/A (former adj)
LIST Ex/N = Ex/N ; #!! Ex/N
LIST Ex/Num = Ex/Num ; #!! Ex/Num
LIST Ex/V = Ex/V ; #!! Ex/V
LIST Ex/WORD = Ex/N Ex/V Ex/A Ex/Num ; #!! Ex/WORD
LIST DerTag = Der/MWN Der/И Der/а Der/ал Der/ась Der/выв Der/джык Der/дор Der/иг Der/кежлӧ Der/кодь Der/коста Der/кості Der/л Der/ла Der/ладор Der/лун Der/лы Der/лывлы Der/мед Der/моз Der/мысь Der/мысьт Der/мӧн Der/мӧнъя Der/овт Der/сор Der/сь Der/сьы Der/сюрӧ Der/тыр Der/тырйи Der/тыръя Der/тӧдз Der/тӧм Der/чы Der/чӧж Der/ывлы Der/ысь Der/ышт Der/ӧм ; #!! DerTag


#!! ### Verbal categories
LIST Prs = Prs ; #!! Prs
LIST Fut = Fut ; #!! Fut
LIST Fut1 = Fut1 ; #!! Fut1
LIST Imprt = Imprt ; #!! Imprt
LIST Prt1 = Prt1 ; #!! Prt1
LIST Prt2 = Prt2 ; #!! Prt2
LIST Prf = Prf ;  #!! Prf
LIST PrfIpf = PrfIpf ; #!! PrfIpf
LIST HstPrf = HstPrf ; #!! HstPrf
LIST PluPrf = PluPrf ; #!! PluPrf
LIST HstPluPrf = HstPluPrf ; #!! HstPluPrf
LIST Ind = Ind ind ; #!! Ind
LIST Imp = Imp ;  #!! Imp
LIST Cond = Cond cond ; #!! Cond
LIST Opt = Opt opt ; #!! Opt

LIST Sg1 = Sg1 ; #!! Sg1
LIST Sg2 = Sg2 ; #!! Sg2
LIST Sg3 = Sg3 ; #!! ...
LIST Pl1 = Pl1 ; 
LIST Pl2 = Pl2 ; 
LIST Pl3 = Pl3 ; 
LIST Inf = Inf ; 
LIST Pos = Pos ; 
LIST Neg = Neg neg ; 
LIST ConNeg = ConNeg conneg; 

#!! Nominal categories
LIST Sg = Sg sg ; #!! Sg
LIST Pl = Pl pl ; #!! Pl
LIST Nom = Nom nom ; #!! Nom
LIST Gen = Gen gen ; #!! Gen
LIST Abl = Abl abl ; #!! Abl
LIST Dat = Dat dat ; #!! Dat
LIST Com = Com com ; #!! Com 
LIST Cns = Cns cns ; #!! Cns
LIST Acc = Acc acc ; #!! ...
LIST Ins = Ins ins ; 
LIST Ine = Ine ine ; 
LIST Ill = Ill ill ; 

LIST Ela = Ela ela ; 
LIST Car = Car car ; 
LIST Egr = Egr egr ; 
LIST Tra = Tra tra ; 

LIST Apr = Apr apr ; 
LIST Ter = Ter ter ; 
LIST Abe = Abe abe ; 
LIST Prl = Prl prl ; 
LIST Cmpl = Cmpl ;
LIST Abs = Abs ;
LIST Attr = Attr ;
LIST Relat = Relat ;

LIST HabObj = HabObj ; 
LIST Instr = Instr ; 
LIST Superl = Superl ; 
LIST Comp = Comp ; 

LIST Pers = Pers ;
LIST Refl = Refl ; 
LIST Rel = Rel ; 
LIST Interr = Interr ; 
LIST Recipr = Recipr ; 

LIST PxSg1 = PxSg1 ; 
LIST PxSg2 = PxSg2 ; 
LIST PxSg3 = PxSg3 ; 
LIST PxPl1 = PxPl1 ; 
LIST PxPl2 = PxPl2 ; 
LIST PxPl3 = PxPl3 ; 

LIST Card = Card ; 

LIST Coll = Coll ; 
LIST Comp = Comp ; 

LIST Ord = Ord ; 
LIST Temp = Temp ; 

LIST AN = AN ; 
LIST ANA = ANA ; 
LIST ANAA = ANAA ; 
LIST CHOZH = CHOZH ; 
LIST IG = IG ; 

LIST Instr = Instr ; 

LIST KEZHLO = KEZHLO ; 
LIST MOZ = MOZ ; 
LIST MYS = MYS ; 
LIST MYST = MYST ; 
LIST OM = OM ; 

LIST SOR = SOR ; 
LIST TODZ = TODZ ; 
LIST TYR = TYR ; 
LIST TYRJI = TYRJI ; 

LIST CLB = CLB ; 

LIST ABBR = ABBR ;
LIST LEFT = LEFT ; 
LIST RIGHT = RIGHT ; 
LIST COMMA = "," ;
LIST QMARK = """ ; # "  #!! QMARK
LIST PPUNCT = PUNCT ;   #!! PPUNCT 
SET PUNCT = PPUNCT - QMARK ;  #!! PUNCT
LIST ¶ = ¶;   #!! ¶

LIST Der/MWN = Der/MWN ;
LIST Der/са = Der/са ;

LIST CASE = Nom Gen Abl Dat Com Cns Acc Ins Ine Ill Ela Car Egr Tra Apr Ter Abe Prl ;
SET OBLCASE = CASE - Nom ;
LIST PrsPtc = PrsPtc ;
LIST PrsPrc = PrsPrc ;
LIST PastPtc = PastPtc ;
LIST Noun1 = Noun1 ;
LIST ActPrsPtc = ActPrsPtc ;

#!! ### Verb sets
LIST VNEG = "ог" "он" "оз" "огӧ" "огӧй" "онӧ" "онӧй" "эг" "эн" "эз" "эгӧ" "эгӧй" "энӧ" "энӧй" ; #!! VNEG (all Neg verbs)

SET VFIN = Ind | Cond | Opt ; #!! VFIN

LIST ASKI = "аски" "понедельникӧ" "вторникӧ" "середаӧ" "четвергӧ" "пекничаӧ" "субӧтаӧ" "вежалунӧ" "регыд" "аскомысь"; #!! ASKI (tomorrow set)

# Complementary sets

SET Non-Pcle = WORD - Pcle ;
SET NOMINAL = N | Pron ;

SET COMMON-N = N - Prop;








#!! ### Grammarchecker sets

LIST &err-agr = &err-agr ;
LIST &err-gen-po = &err-gen-po ;
LIST &err-no-conneg = &err-no-conneg ;
LIST &err-orrood-inf = &err-orrood-inf ;
LIST &err-ext-agr = &err-ext-agr ;
LIST &err-ext-vagr = &err-ext-vagr ;
LIST &err--conneg-not-3rdsg = &err-conneg-not-3rdsg ;

MAPPING-PREFIX = & ;

SECTION

# Speller suggestions rule – add &SUGGESTWF to any spelling suggestion
# that we actually want to suggest to the user.
# The simplest is to just add it to all spelled words:
ADD:spell-it-all (&typo &SUGGESTWF) (<spelled>) ;
# But perhaps you want to only suggest spellings of words that are not inside "quotes":
ADD:spell-conservatively (&typo &SUGGESTWF) (<spelled>) IF (NEGATE -1 QMARK LINK 2 QMARK);

# A simple grammar checker rule without suggestions: Ensure preceding nominal agrees with the verb
ADD:err-agr (&err-agr) TARGET V IF (-1C Sg + Nom) (0 V) (NOT 0 Sg3);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Sg1 + Nom) (0 V) (NOT 0 Sg1);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Sg2 + Nom) (0 V) (NOT 0 Sg2);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Pl1 + Nom) (0 V) (NOT 0 Pl1);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Pl2 + Nom) (0 V) (NOT 0 Pl2);

ADD:err-conneg-not-3rdsg (&err-conneg-not-3rdsg) TARGET (V Prs Sg3) IF (0 Ind OR Cond)(-1 (V Neg Sg3));
#ok вӧлі оз уджав
#ok вӧлі уджалӧ
#err вӧлі оз уджалӧ 

# And one with a suggestion where we simply change the tag Sg into Attr:
ADD:attr-not-pred (&attr-not-pred) TARGET (A Sg) IF (NOT 0 Attr OR Gen) (1 CC LINK *1 COMMON-N) ;
COPY:attr-not-pred (Attr &SUGGEST) EXCEPT (Sg) TARGET (&attr-not-pred) ;
# The method is: Add &SUGGEST to a copied reading to *generate* a
# suggestion form from that reading. The copy should contain the error
# tag too – &-prefixed error tags are ignored when generating, but
# used to create human-readable messages.

# Simple punctuation rules showing how to change the lemma in the suggestions:
ADD:use-guillemets (&guillemets) TARGET (""");
COPY:left-guillemet ("«" &SUGGEST) EXCEPT (""") TARGET (&guillemets) ;
COPY:right-guillemet ("»" &SUGGEST) EXCEPT (""") TARGET (&guillemets) ;

ADD:use-ellipsis (&ellipsis) TARGET ("...");
COPY:use-ellipsis ("…" &SUGGEST) EXCEPT ("...") TARGET (&ellipsis) ;
