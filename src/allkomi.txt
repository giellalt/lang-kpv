# This is a makefile that builds the Komi morphological parser
# *****************************************************************


# This is a preliminary file that builds a Komi Sami parser based upon
# xfst and not twolc.

# Here we build the final generator , an inverted transducer of the analyzer.
# It is dependent upon kom.save

ikom.fst: ../bin/ikom.fst
../bin/ikom.fst: ../bin/kom.fst
	@echo
	@echo "*** Building the inverse ikom.fst ***"
	@echo
	@printf "load ../bin/kom.save \n\
	invert net \n\
	save stack ../bin/ikom.fst \n\
	quit \n" > ../../tmp/ikom-fst-script
	@xfst -utf8 < ../../tmp/ikom-fst-script
	@rm -f ../../tmp/ikom-fst-script


# This goal is to build the final analyser. It depends on all the files.

kom.fst: ../bin/kom.fst
../bin/kom.fst: ../bin/kom.save ../bin/caseconv.fst ../bin/tok.fst 
	@echo
	@echo "*** Building kom.fst ***" ;
	@echo
	@printf "read regex [[@\"../bin/kom.save\"] .o. \
	[@\"../bin/caseconv.fst\"]] ; \n\
	save stack ../bin/kom.fst \n\
	quit \n" > ../../tmp/kom-fst-script
	@xfst -utf8 < ../../tmp/kom-fst-script
	@rm -f ../../tmp/kom-fst-script


# The second goal is to build the caseconv.fst file
# This goal depends on case.regex

caseconv.fst: ../bin/caseconv.fst
../bin/caseconv.fst: case.regex
	@echo
	@echo "*** Building caseconv.fst ***" ;
	@echo
	@printf "read regex < case.regex \n\
	save stack ../bin/caseconv.fst \n\
	quit \n" > ../../tmp/caseconv-script
	@xfst -utf8 < ../../tmp/caseconv-script
	@rm -f ../../tmp/caseconv-script


# Another goal is to build a preprocessor.This goal depends on tok.txt

tok.fst: ../bin/tok.fst
../bin/tok.fst: tok.txt
	@echo
	@echo "*** Building the tokenizer tok.fst ***" ;
	@echo
	@printf "source tok.txt \n\
	save stack ../bin/tok.fst \n\
	quit \n" > ../../tmp/tok-script
	@xfst -utf8 < ../../tmp/tok-script
	@rm -f ../../tmp/tok-script


kom.save: ../bin/kom.save
../bin/kom.save: ../bin/xfst-kom.bin ../bin/kom-lex.save
	@echo
	@echo "*** Building the parser kom.save ***"
	@echo
	@printf "read regex [[@\"../bin/kom-lex.save\"] .o. \
	[@\"../bin/xfst-kom.bin\"]] ; \n\
	save stack ../bin/kom.save \n\
	quit \n" > ../../tmp/kom-save-script
	@xfst -utf8 < ../../tmp/kom-save-script
	@rm -f ../../tmp/kom-save-script

# The first goal is to build kom-lex.save
# This goal depends on a bunch of lexicon files

kom-lex.save: ../bin/kom-lex.save
../bin/kom-lex.save: kom-lex.txt noun-kom-morph.txt noun-kom-lex.txt \
        adj-kom-lex.txt \
	adv-kom-lex.txt verb-kom-lex.txt pron-kom-lex.txt punct-kom-lex.txt \
	cc-kom-lex.txt cs-kom-lex.txt interj-kom-lex.txt pp-kom-lex.txt
	@echo
	@echo "*** Building kom-lex.save ***" ;
	@echo
	printf "compile-source kom-lex.txt noun-kom-morph.txt noun-kom-lex.txt \
	adj-kom-lex.txt verb-kom-lex.txt verb-kom-morph.txt pron-kom-lex.txt \
	adv-kom-lex.txt pp-kom-lex.txt punct-kom-lex.txt \
	cc-kom-lex.txt cs-kom-lex.txt interj-kom-lex.txt  \n\
	save-source ../bin/kom-lex.save \n\
	quit \n" > ../../tmp/kom-lex-save-script
	@lexc -utf8 < ../../tmp/kom-lex-save-script
	rm -f ../../tmp/kom-lex-save-script

# The second goal is to build xfst-kom.bin
# This goal depends on xfst-kom.txt

xfst-kom.bin: ../bin/xfst-kom.bin
../bin/xfst-kom.bin: xfst-kom.txt
	@echo
	@echo "*** Building xfst-kom.bin ***" ;
	@echo
	@printf "source xfst-kom.txt \n\
	save stack ../bin/xfst-kom.bin \n\
	quit \n" > ../../tmp/xfst-kom-script
	@xfst -utf8 < ../../tmp/xfst-kom-script
	@rm -f ../../tmp/xfst-kom-script

clean:
	@rm -f ../bin/*.bin ../bin/*.fst ../bin/*.save


LEXICON Adjective
#;
LEXICON Adverb 
#;
а (->) А, б (->) Б, в (->) В, г (->) Г, д (->) Д, е (->) Е, ё (->) Ё, 
ж (->) Ж, з (->) З, и (->) И, і (->) І, й (->) Й, к (->) К, л (->) Л, 
м (->) М, н (->) Н,о (->) О, ӧ (->) Ӧ, п (->) П, р (->) Р, с (->) С, 
т (->) Т, у (->) У, ф (->) Ф, х (->) Х, ц (->) Ц, ч (->) Ч, ш (->) Ш, 
щ (->) Щ, ъ (->) Ъ, ы (->) Ы, ь (->) Ь, э (->) Э, ю (->) Ю, 
я (->) Я || .#. _ ;


LEXICON CC
+CC: #;

LEXICON Conjunction
я CC ;
LEXICON CS 
+CS: #;

LEXICON Subjunction
ден CS ;
LEXICON Interjection
ай #;
Multichar_Symbols

! POS
+N !+V +A 
!+Adv +CC +CS +Interj +Pron +Num

! Verbal MSP
!+Prs +Fut +Prt +Prf +PrfIpf +HstPrf +PluPrf +HstPluPrf
!+Ind +Imp +Cond +Opt
!+Sg1 +Sg2 +Sg3 +Pl1 +Pl2 +Pl3
!+Inf
!+Pos +Neg +ConNeg

! Nominal MSP
+Sg +Pl
+Nom +Gen +Abl +Dat +Com +Cns 
+Acc +Ins +Ine +Ill 
+Ela +Car +Egr +Tra  +Apr +Ter
!+Abe +Adc +Prl ! not in use!

+PxSg1 +PxSg2 +PxSg3 +PxPl1 +PxPl2 +PxPl3


Vow Cns Syll


!+Ord
е2 о2 ӧ2 к2 м2 т2 %>

^Inf

! Key lexicon

LEXICON Root

Noun ;
!Verb ;
!Adjective ;
!Adverb ;
!Conjunction ;
!Subjunction ;
!Interjection ;
!Numeral ;
!Pronoun ;
!Postposition ;
!Punctuation ;



! I include some small lexica here
! waiting for own files, or perhaps they could stay here


!LEXICON Numeral
!odÔg NUMBERSUF ;
!kyk:kykt2 NUMBERSUF ;
!kuin':kuin't2 NUMBERSUF ;
!n'yl' NUMBERSUF ;
!vit' NUMBERSUF ;
!kuat' NUMBERSUF ;
!siz'ym NUMBERSUF ;
!t‚mys NUMBERSUF ;
!ykmys NUMBERSUF ;
!das NUMBERSUF ;
!kyz' NUMBERSUF ;
!kuamyn NUMBERSUF ;
!n'yl'don NUMBERSUF ;
!vit'ton NUMBERSUF ;
!kuat'ton NUMBERSUF ;
!siz'ymdon NUMBERSUF ;
!t‚myston NUMBERSUF ;
!ykmyston NUMBERSUF ;
!s˚ NUMBERSUF ;
!s˚rs NUMBERSUF ;
!million NUMBERSUF ;
!milliard NUMBERSUF ;

!LEXICON NUMBERSUF
!+Num: K;
!+Num:%> NOUNSUF ;
!+Num:%> ORDINAL ;

!LEXICON ORDINAL
!+Ord:ÍtÔ K;



LEXICON K
!+Qst:а #;
#; 
LEXICON Noun 
морт NOUNSUF "man" ;
пи NOUNSUF "boy" ;
гез NOUNSUF "rope" ;
ва NOUNSUF "water" ;
видз NOUNSUF "meadow" ;
вӧр NOUNSUF "forest" ;
вӧв:вӧл NOUNSUF "horse" ;
пу NOUNSUF "tree" ;
кар NOUNSUF "city" ;LEXICON NOUNSUF
+N+Sg: NOUNSUF-2 ;
+N+Pl:%>яс NOUNSUF-2 ;

LEXICON NOUNSUF-2
 PREPX ;
 PRECX ;
 ACCLEX ;
 LOCLEX ;
 CARLEX ;
 ELALEX ;

LEXICON PREPX
PREPXSG ;
PREPXPL ;

LEXICON PREPXSG
POSTCX ;
+PxSg1:%>ӧй POSTCX;
+PxSg2:%>ыд POSTCX;
+PxSg3:%>ыз POSTCX;

LEXICON PREPXPL
POSTCX ;
+PxPl1:%>ным POSTCX;
+PxPl2:%>ныд POSTCX;
+PxPl3:%>ныз POSTCX;

LEXICON POSTCX
+Nom: K; 
+Gen:%>лӧн K; 
+Abl:%>лысь K;
+Dat:%>лы K;
+Com:%>кӧд K ;               !svoed
+Cns:%>ла K ; ! consecutive  !dostig

LEXICON ACCLEX
+Acc:%>ӧс K;


LEXICON LOCLEX
+Ill: LOCPX ;
+Ill:%>ӧ K;                  !vstup
+Ine: LOCPX ;
+Ine:%>ын K;                 !mestn
+Ins:%>н LOCPX ;
+Ins:%>ӧн K;  ! instrumental !tvor

LEXICON LOCPX
+PxSg1:>ам K ;
+PxSg2:>ад K ;
+PxSg3:>ас K ;
 :%>а POSTPX ;


LEXICON ELALEX
+Ela:%>ысь K;                !ish
+Ela:%>сь POSTPX ;

LEXICON CARLEX
+Car:%>тӧг K; ! caritive     !lysh
+Car+PxSg1:%>ӧйтӧг K ;
+Car+PxSg2:%>тӧгыд K ;
+Car+PxSg3:%>тӧгыс K ;
+Car:%>тӧг POSTPXPL ; 


LEXICON PRECX
+Apr:%>лань POSTPX;               !pribl
+Egr:%>сянь POSTPX;               !otdal
+Tra:%>ті POSTPX;                 !pereh -ti -ӧd
+Tra:%>ӧд POSTPX;                 !pereh -ti -ӧd
+Ter:%>ӧдз POSTPX;                !pred

LEXICON POSTPX
K ;
POSTPXSG ;
POSTPXPL ;

LEXICON POSTPXSG
+PxSg1:%>ым K ;
+PxSg2:%>ыд K ;
+PxSg3:%>ыз K ;

LEXICON POSTPXPL
+PxPl1:%>ным K ;
+PxPl2:%>ныд K ;
+PxPl3:%>ныз K ;
! The Komi postposition

LEXICON PP ! These are the indeclieable ones 
+Po: # ;

LEXICON PPX ! These are the ones declined for case
# ;
!+Po: #; ! Nominative
!+Po+Ine: #;
!+Po+Ela: #;
!+Po+Ill: #;
!+Po+Pro: #;
!+Po+Egr: #;
!+Po+Ter: #;
!+Po+Apr: #;

LEXICON Postposition

PP ;
PPX ;LEXICON Pronoun 
#;LEXICON Punctuation 
+CLB:%,   # ;
+CLB:%.   # ;
+CLB:%:   # ;
+CLB:%;	  # ;
+CLB:%!	  # ;
+CLB:%?	  # ;
+PUNCT:%-  # ;
+HYPH:%" # ;
+HYPH:%´ # ;
+HYPH:%ª # ;
+PAR:%[ # ;
+PAR:%] # ;
+PAR:%( # ;
+PAR:%) # ;


# CONTENT: Sample Finite-State Tokenizer (no multi-words)
# AUTHOR: Original version by Anne Schiller, copied from the
# Karttunen/Beesley book on finite state grammar
# Modified by Trond Trosterud, 2002.
# CREATED: 12-Jun-1997
# UPDATED: 05-Sep-2001
# =============================================================
# Usage: xfst -f [ThisFile]
# =============================================================

clear stack
echo >>> define white space
define SP " ";
define TAB "\t";
define NL "\n";

define WS [SP|NL|TAB];

# =============================================================
echo >>> define single character symbols
define SINGLE [ %" | %. | %, | %; | %: | %! | %?
| %( | %) | %[ | %] | %{ | %} | %´ | %ª 
];
define PUNCT [ %. %. (%.) | %' %' | %' %' | %, %, ] ;
define Char \[ WS | SINGLE ] ;

# =============================================================
echo >>> define SYMBOL
define SYMBOL [ SINGLE | PUNCT ] ;

echo >>> define WORD
define WORD [ Char ]+ ;

# =============================================================
#echo >>> list of abbreviations
#define ABBR [
#Mr. | Mrs. | Ms.
#| etc. | e.g. | i.e.
#| ltd. | Ltd. | inc. | Inc.
#];

# =============================================================
echo >>> regular abbreviations
define Letter [
             а | и | і | о | ӧ | у | ы | э 
           | А | И | І | О | Ӧ | У | Ы | Э
           | б | в | г | д | ж | з 
           | Б | В | Г | Д | Ж | З 
           | й | к | л | м | н | п | р | с | т | ф | х | ц 
           | Й | К | Л | М | Н | П | Р | С | Т | Ф | Х | Ц 
           | ч | ш | щ | ъ | ь 
           | Ч | Ш | Щ | Ъ | Ь
           | е | ё | ю | я    
           | Е | Ё | Ю | Я ];

define INIT [ Letter %. ]+ ;

# =============================================================
echo >>> numeric expressions
define Digit [ %0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9];
define NumOp [ %- | %+ | %* | %/ | %= | %: ];
define NumSep [ %. | %, ];
define NUM [ Digit | NumOp | NumSep]+ & $[Digit] ;

# =============================================================
echo >>> define tokens
define Token [ WORD | SYMBOL | INIT ];
# commenting out NUM in order to allow 7-bit encoding
# commenting them in again since this is Lule S·mi
define Token [ WORD | SYMBOL | ABBR | INIT | NUM ];
# =============================================================
echo >>> longest match--insert a newline after each token
define TOK1 [ Token @-> ... NL ] ;
echo >>> map spaces to a newline
define TOK2 [ [WS]+ @-> NL ];

# =============================================================
echo >>> compose
read regex [TOK1 .o. TOK2 ];
invert net
save stack tok.fst
 
LEXICON Verb
сетны NYVERB "give" ;
ветлыны NYVERB "walk" ;
вундыны NYVERB ;
корны NYVERB ;
!LEXICON YNYVERB
!COMMONFORMS ;
!:y LONGFORMS ;

LEXICON NYVERB
+V:%^Inf COMMONFORMS ;
+V:%^Inf LONGFORMS ;


LEXICON COMMONFORMS
+Ind+Prs:%> OPRS ;
!+Ind+Fut:%> FUT ;
!+Ind+PstI:%>й PASTI ;
!+Ind+PstII:%>еме PASTII ;
!+Cond:%>сал COND ;

LEXICON LONGFORMS 
+Inf:%>ны K ;
+ConNeg: K ;

LEXICON OPRS
+Sg1:%>а K ;
+Sg2:%>ан K ;
+Sg3:%>ӧ K ;
+Pl1:%>ам K ;
+Pl2:%>анныд K ;
+Pl3:%>ӧны K ;


!  This file is a script for the Xerox xfst interface.

clear stack
echo << THE DEFININTIONS >>

echo << defining Vow >>

define Vow [ а | и | і | о | ӧ | у | ы | э 
           | А | И | І | О | Ӧ | У | Ы | Э
           ];

echo << defining Cns >>
define Cns [ б | в | г | д | ж | з 
           | Б | В | Г | Д | Ж | З 
           | й | к | л | м | н | п | р | с | т | ф | х | ц 
           | Й | К | Л | М | Н | П | Р | С | Т | Ф | Х | Ц 
           | ч | ш | щ | ъ | ь 
           | Ч | Ш | Щ | Ъ | Ь
           | е | ё | ю | я         ! Cns-initial vowels
           | Е | Ё | Ю | Я 
           ];


! Look into the vowel distribution! the i/ï is wrong.

define Syll [ ( Cns ) ( Cns ) Vow ( Cns ) ( Cns ) ] ; 

echo << defining Boundary >>
define Boundary %> ;





! Consonant alternations in certain pos
! -------------------------------------



! Vowel shifts
! ------------

echo << defining the rules >>

define LongInfDeletion ы -> 0 || _ н ы %^Inf %> Vow ; 

define InfDeletion   н ы -> 0 || _ %^Inf ;



!define PalatalisedSuffixes Í -> e, Î -> o || Vow Boundary (x) _ ;

!define PalatalMarkDeletion ' -> 0 || _ Boundary e ;

!define HardMarkDeletion ъ -> 0 || Vow Boundary _ ;

define LtoV [ л -> в || _ [ .#. | %> Cns ] ] ;

define Syncope ӧ2 (->) 0, е2 (->) 0, о2 (->) 0 || _ Cns %> (ъ) Vow ;

define ParagogicCns й2 -> й, к2 -> к, м2 -> м, т2 -> т || _ %> Vow ;



echo << defining cleanup rules >>

define Cleanup ӧ2 -> ӧ, е2 -> е, о2 -> о ;

define BoundaryDeletion [ %> -> 0 ] ;

define Deletion [ к2 -> 0, м2 -> 0, т2 -> 0, %@ -> 0, %^Inf -> 0 ] ;
!                %^@ -> 0,  ;

echo << composing different parts >>

read regex [ 
LongInfDeletion
.o.
InfDeletion
.o.
!PalatalisedSuffixes
!.o.
!PalatalMarkDeletion
!.o.
!HardMarkDeletion
!.o.
LtoV
.o.
Syncope
.o.
ParagogicCns
.o.
Cleanup
.o.
BoundaryDeletion
.o.
Deletion 
] ;


